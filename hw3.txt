1. 'number' + 3 + 3
"number33"
Так як перший аргумент це рядок, то решта аргументів додадуться методом конкатенації.

2. null + 3
3
У аріфметичних операціях null дорівнює нулю.

3. 5 && "qwerty"
"qwerty"
&& - оператор логічного І. Аргумент "5" поверне True, аргумент "qwerty" також поверне True.
В такому випадку логічний оператор І поверне останній аргумент з True.

4. +'40' + +'2' + "hillel"
"42hillel"
Унарний плюс перетворить рядки 40 та 2 на числа і ми отримаємо 42.
Через те що останній аргумент це рядок, число 42 конкатенується з "hillel".

5. '10' - 5 === 6
false
Через оператор "-" дія '10'-5 буде оброблятися як арифметичний вираз і набуде значення 5.
Далі, так як 5 не дорівнює 6 результат буде false.

6. true + false
1
У разі арифметичних дій true конвертується в "1", а false - в "0".
Тобто маємо 1+0.

7. '4px' - 3
NaN
JS спробує перетворити віднімання на арефметичну дію, але через неможливість конвертувати значення "4px"
у число результатом буде Not a Number.

8. '4' - 3
1
Через можливість конвертування рядка "4" у число "4", JS перетворить вираз на арифметичне віднімання.
Тобто отримаємо 4-3=1.

9. '6' + 3 ** 0
"61"
Спочатку виконається операція піднесення до степеня 3**0, результатом якої буде 1.
А потім конкатенація рядка "6" та числа "1", оскільки перше задано як рядок у явному вигляді.

10. 12 / '6'
2
Через можливість конвертування рядка "6" у число "6", JS перетворить вираз на арифметичне ділення.
Тобто отримаємо 12/6=2.

11. '10' + (5 === 6)
"10false"
Першою виконається логічна дія у дужках, яка поверне значення false, оскільки 5 не дорівнює 6.
А потім, оскільки перший аргумент заданий як рядок, відбудеться конкатенація рядка "10"
та конвертованого в рядок false.

12. null == ''
false
Так як обидва опреанди неможливо привести до одного типу, результатом буде false.

13. 3 ** (9 / 3)
27
Першою виконається дія у дужках: 9/3=3.
Другою виконається операція піднесення до степеня: 3**3=27.

14. !!'false' == !!'true'
true
Оператор !! використовується для перетворення аргумента в булеве значення. При цьому
будь-який непорожній рядок перетворюється на true. Тобто !!'false'==true,а також !!'true'==true.
Тобто отримуємо рівняння true==true.

15. 0 || '0' && 1
1
Логічний оператор || поверне перше істине значення, або, за відсутністю істиного, будь-яке останнє.
Тож логічна операція 0 || "0" поверне "0", оскільки число 0 поверне false, а непустий рядок "0"
поверне true. Логічний же оператор && поверне перше хибне значення, або, за відсутністю хибного,
будь-яке останнє. Тож логічна операція "0" && 1 поверне число 1, оскільки рядок "0" та число 1
обидва повернуть true, але число 1 є останнім.

16. (+null == false) < 1
false
Унарний плюс конвертує null у число 0. Для можливості арифметичного порівняння, false конвертується
в число 0. Тож в дужках маємо вираз 0==0, що повертає значення true. Для можливості подальшого
арифметичного порівняння, це true конвертується в число 1. В результаті отримуємо порівняння 1<1,
результатом якого є false.

17. false && true || true
true
У виразі false && true логічний оператор && поверне перше хибне значення - тобто false.
В наступній дії, у виразі false || true, логічний оператор || поверне перше істине значення - тобто true.

18. false && (false || true)
false
Вираз у дужках false || true через логічний оператор || поверне перше істине значення - тобто true.
В наступній дії, у виразі false && true, логічний оператор && поверне перше хибне значення - тобто false.

19. (+null == false) < 1 ** 5
false
Унарний плюс конвертує null у число 0. Для можливості арифметичного порівняння, false конвертується
в число 0. Тож в дужках маємо вираз 0==0, що повертає значення true. Для можливості подальшого
арифметичного порівняння, це true конвертується в число 1. В результаті отримуємо порівняння 1<1**5.
Так як 1**5=1, маємо порівняння 1<1 результатом якого є false.
